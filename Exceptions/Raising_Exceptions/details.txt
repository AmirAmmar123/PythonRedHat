Python provides the raise statement, allowing the programmer to force a specified exception to occur.

    Several basic examples of this are demonstrated below in an interactive shell.

    Most of the examples use the raise keyword followed by an instance of an exception object.

    The last example simply uses the raise keyword by itself to reraise the exception after handling it.

$ python3
Python 3.9.10 (main, Feb 9 2022, 00:00:00)
[GCC 11.2.1 20220127 (Red Hat 11.2.1-9)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> raise Exception()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
Exception
>>>
>>> raise Exception("There was a problem")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
Exception: There was a problem
>>>
>>> raise ValueError("Bad value 'one'")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: Bad value 'one'
>>>
>>> try:
...     int("one")
... except ValueError:
...     print("Not a Number")
...     raise
...
Not a Number
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
ValueError: invalid literal for int() with base 10: 'one'
>>> exit()
$

    The following example is a rewrite of the custom Fraction class defined previously.

    It incorporates raising a built-in exception for a denominator of zero.