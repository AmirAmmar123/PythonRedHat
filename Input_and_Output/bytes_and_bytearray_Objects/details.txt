The examples in this chapter, up to this point, have focused on reading and writing text files as opposed to binary files.

    The open() function has returned a TextIOWrapper object which expects and produces str objects to read and write.

    Writing and reading to and from binary files deal with bytes and bytearray objects instead of strings.

    No encoding, decoding, or newline translation is performed.

A bytearray object is a mutable sequence of integers in the range 0 >= x < 256.

    It has most of the usual methods of mutable sequences.

    It also has most of the methods that a bytes object has.

A bytes object is an immutable sequence of integers in the range 0 >= x < 256.

    A bytes object is an immutable version of bytearray.

    The syntax for a literal bytes object is similar to that of string literals, except that a b prefix is added:

 b'this is a bytes object'
 b"this is also a bytes object"

Converting between strings and bytes can be done by using the bytes decode() and the str encode() methods.

$ python3
Python 3.9.10 (main, Feb 9 2022, 00:00:00)
[GCC 11.2.1 20220127 (Red Hat 11.2.1-9)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> x = b"Goodbye"
>>> y = "Hello"
>>> print(type(x), type(y))
<class 'bytes'> <class 'str'>
>>> x = x.decode()
>>> y = y.encode()
>>> print(type(x), type(y))