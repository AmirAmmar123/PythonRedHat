Exercises

The solution files for these exercises are in the AD141-apps repository, within the functions/solutions directory.
Exercise 1

Write and test a function that is designed to validate input.

    The function should prompt the user for a positive integer.

    It should validate the information entered by the user is indeed a positive integer.

        If number entered is valid, the function should return the number.

        If the number entered is invalid, the function should return a zero (0) instead.

    The application, not the function, should indicate with a message in the output each time an invalid entry is given.

Exercise 2

Write and test a function that takes a collection of strings and returns the length of the longest string in the collection.

    The application should loop through the collection of strings and rely on the value returned by the function to format all of the strings to the output such that they are all right justified to the width of the longest string.

Exercise 3

There is a built-in function in Python called sum that will return the sum of all of the numbers of an iterable object.

    Write a similar function, but instead of taking a collection as a parameter, the function should take a variable number of arguments and return the sum of them.

Exercise 4

Rewrite the function in Exercise 3 above to return a tuple instead of a sum.

    The tuple should be the sum and the average of all of the arguments passed to the function.

Exercise 5

Write a calculator application that presents the following menu:

Calculator options:
      1. Add
      2. Subtract
      3. Multiply
      4. Divide
      5. Quit

    The user is expected to enter a number from the above menu.

        After choosing the operation, the user should be prompted twice for 2 numbers and the chosen operation performed on them with the result being displayed on the screen.

        Each of the above options should be implemented as its own function.

Exercise 6

Write and test a function that receives a list as its only parameter and returns a new list of the positive elements only.
Exercise 7

Write and test a function that takes a variable number of arguments as its first parameter and a number as its second parameter.

    The function should return the count of the values in the tuple parameter (the variable number of arguments) that are greater than the second parameter (num in the sample below).

    For example, one such call to a function named positive is shown below.

res = positive(5, -10, 10, -20, 30, num=0)

    In this case, the function would return a value of 3.

Exercise 8

Write a function that returns a nested function.

    When the nested function is executed it should return the sum of two integers.

    The two parameters should be passed to the outer function and used by the inner function.

Exercise 9

Re-write your solution to Exercise 8 such that the outer function receives no parameters, and the nested function is defined as taking the two parameters.
Exercise 10

Re-write your solution to either Exercise 8 or 9 so that it uses a lambda expression as the nested function.
Exercise 11

Write and test a function that takes two lists as parameters and returns a list of the elements that are common to both.
Exercise 12

Write and test a function that takes a number and a dictionary and adds the number to all values in the dictionary.

    You can assume that all the values in the dictionary are numbers.

Exercise 13

While the index method of a list can be used to find either the first occurrence of an item or the first occurrence of it within a range of the list, it does not allow you to find, say the second or third occurrence by passing in a number as to the one you are looking for.

    Write a function that takes 3 parameters and returns what it finds.

        One being the list to search.

        The second being the object to search for.

        The thrid being an int representing which one you are looking for such as the fist, second, third occurrence.

    The index method raises a ValueError exception if the value being searched for does not exit in the list.

        It is perfectly fine for your function to behave in the same manner.

References

More information about docstring conventions can be found in PEP 257 at the following URL https://www.python.org/dev/peps/pep-0257/ 